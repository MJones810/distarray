# Imports

import pylab
import distarray as da
import numpy as np
from IPython.kernel import client
from distarray import client as daclient

# Get parallel things started

mec = client.MultiEngineClient()
mec.activate()
dac = daclient.DistArrayContext(mec)

%px import distarray as da
%px import numpy as np

# Read the image

size = 640
keep_frac = 0.9
im = pylab.imread('moon.png').astype(float)[:size,:size,:3]
red = im[:,:,0]
green = im[:,:,1]
blue = im[:,:,2]

# Push as DistArray

dac.todistarray('red',red)
dac.todistarray('green',green)
dac.todistarray('blue',blue)

%px red_fft = da.fft.fft2(red)
%px green_fft = da.fft.fft2(green)
%px blue_fft = da.fft.fft2(blue)

def filter_func(i,j, rows, cols, keep_frac=0.6):
    min_rows = rows*keep_frac
    max_rows = rows*(1-keep_frac)
    min_cols = cols*keep_frac
    max_cols = cols*(1-keep_frac)
    if (i<max_rows or i>=min_rows) or (j<max_cols or j>=min_cols):
        return 1.0
    else:
        return 0.0

mec.push_function(dict(filter_func=filter_func))
mec['size'] = size
mec['keep_frac'] = keep_frac

%px filter_arr = da.fromfunction(filter_func,(size,size),dtype=float,rows=size,cols=size,keep_frac=keep_frac)
%px new_red_fft = red_fft*filter_arr
%px new_red = da.fft.ifft2(new_red_fft)
%px new_green_fft = green_fft*filter_arr
%px new_green = da.fft.ifft2(new_green_fft)
%px new_blue_fft = blue_fft*filter_arr
%px new_blue = da.fft.ifft2(new_blue_fft)

new_red = dac.fromdistarray('new_red').real
new_green = dac.fromdistarray('new_green').real
new_blue = dac.fromdistarray('new_blue').real
new_im = np.dstack((new_red,new_green,new_blue))

filter_arr = dac.fromdistarray('filter_arr')

# imshow(new_red)



# 